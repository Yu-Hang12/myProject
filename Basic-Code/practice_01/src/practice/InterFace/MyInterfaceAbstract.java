package practice.InterFace;

/* 在任何版本中，接口中都可以定义抽象方法
 *
 * 注意事项：
 * 1.接口中的抽象方法，修饰符必须是两个固定的关键字：public abstract
 * 2.这两个关键字修饰符，可以选择性的省略(暂时不推荐)
 * 3.方法三要素可以随意定义
 *
 * 接口使用步骤
 * 1.接口不能直接使用，必须有一个实现类来实现该接口；
 * 格式：
 * public 实现类名称 implements 接口名称 {
 *       ...
 * }
 * 2.接口的实现类必须覆盖重写(实现)接口的所有抽象方法；
 * 3.创建实现类的对象，进行使用
 *
 * 注意事项：
 * 如果实现类并没有覆盖重写里面的所有抽象方法，那么这个实现类自身就必须是抽象类
 * ====================================================================================================
 * 从Java8开始，接口中可以定义默认方法，可以用来解决接口升级的问题(如果在接口中新添加一个抽象方法，那么之前的所有抽象类都会报错，默认方法解决这个问题)
 * 默认方法会被实现类继承下去
 * 格式：(public可以省略不写)
 * public default 返回值类型 方法名称(参数列表 ) {
 *      方法体..
 * }
 * 1.接口的默认方法，可以通过接口的实现类对象，直接调用
 * 2.接口的默认方法，也可以被接口的实现类覆盖重写
 * ======================================================================================================
 * 从Java8开始，接口中允许定义静态方法
 * public static 返回值类型 方法名称(参数列表) {
 *      ...方法体
 * }
 * 注意事项
 * 1.不能通过接口实现类的对象来调用接口中的静态方法(正确用法：直接通过接口名称调用静态方法)
 * ======================================================================================================
 * 当需要抽取共有方法，解决default方法中重复代码块的问题
 * 但是这个共有方法，不能被实现类所使用，应该私有化。
 *
 * 解决方案：从Java9开始，接口中可以定义私有方法
 * 1.普通私有方法：解决多个默认方法之间重复代码问题
 * 格式：
 * private 返回值类型 方法名称(参数列表) {
 *      ...
 * }
 * 2.静态私有方法：解决多个静态方法之间重复代码问题
 * 格式：
 * private static 返回值类型 方法名称(参数列表) {
 *      ...
 * }
 * ========================================================================================================
 * 接口当中也可以定义“成员变量”，但是必须使用public static final三个关键字进行修饰，
 * 从效果上看，这其实就是接口的【常量】
 * 格式：public static final 数据类型 常量名称 = 数据值;
 * 备注：一旦使用final关键字，说明不可改变
 * 注意事项：
 * 1.接口当中的常量可以不写public static final，一样是常量
 * 2.接口中的常量，必须进行赋值，不能不赋值
 * 3.接口常量的名称使用大写字母命名，并且需要时使用下划线分隔(推荐命名)
 * */

public interface MyInterfaceAbstract {

    //这其实是一个常量，一旦赋值，不可修改
    public static final int NUM = 10;

    //这是一个抽象方法
    public abstract void Method1();

    //这也是抽象方法
    abstract void Method2();

    //这也是抽象方法
    public void Method3();

    //这也是抽象方法
    void Method4();

    //默认方法
    public default void Method5() {
        System.out.println("这是一个默认方法");
        priMethod1();

    }

    public default void Method7() {
        System.out.println("这也是一个默认方法");
        priMethod1();
    }

    //静态方法
    public static void Method6() {
        System.out.println("这是一个静态方法");
        priMethod2();
    }

    public static void Method8() {
        System.out.println("这也是一个静态方法");
        priMethod2();
    }
    //普通私有方法
    private void priMethod1() {
        System.out.println("AAA");
        System.out.println("BBB");
        System.out.println("CCC");
    }
    //静态私有方法
    private static void priMethod2() {
        System.out.println("AAA");
        System.out.println("BBB");
        System.out.println("CCC");
    }

}
