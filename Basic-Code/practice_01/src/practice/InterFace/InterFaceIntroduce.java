package practice.InterFace;

/*
 * 接口就是多个类的公共规范，是一种引用数据类型。
 * 接口最重要的内容就是其中的：abstract抽象方法
 * 定义一个接口的格式：
 * public interface 接口名称 {
 *       接口内容
 * }
 * 备注：当换了关键字interface之后，编译生成的字节码文件，仍然是：.java-->.class
 *
 * 在任何版本中，接口中都可以定义抽象方法
 *
 * 如果是Java7，那么接口中可以包含的内容有：
 * 1.常量
 * 2.抽象方法
 * 如果是Java8，还可以额外包含有
 * 3.默认方法
 * 4.静态方法
 * 如果是Java9，还可以额外包含有：
 * 5.私有方法
 * =========================================================================================================
 * 使用接口时需要注意
 * 1.接口是没有静态代码块和构造方法的；
 * 2.一个类的直接父类是唯一的，但是一个实现类可以实现多个接口；
 * 格式:public class 返回值类型 实现类名称 implements 接口名称1,接口名称2 {
 *      //覆盖重写所有方法
 * }
 * 3.如果实现类实现的多个接口的抽象方法有重名，那么覆盖重写一次即可；
 * 4.如果实现类没有覆盖重写所有接口的抽象方法，那么实现类就必须是一个抽象类；
 * 5.如果实现类实现的多个接口中，重复的是默认方法，那么实现类必须覆盖重写冲突的默认方法；
 * 6.如果一个类的直接父类，与接口中的默认方法冲突，那么优先使用父类中的方法；(继承优先于接口实现)
 * ==========================================================================================================
 * 1.类与类之间是单继承的，一个类的直接父类只能有一个；
 * 2.类与接口之间是多实现的，一个类可以实现多个接口；
 * ------------------------------------------------------------
 * 3.【接口与接口之间是多继承的，接口可以同时继承多个接口的内容】；
 * 注意事项：
 * 1.多个父接口的抽象方法重复，没关系
 * 2.多个父接口的默认方法重复，必须覆盖重写冲突的默认方法，【而且要带着default关键字】；
 * */

public class InterFaceIntroduce {

    public static void main(String[] args) {
        MyInterfaceAbstractImpl inter = new MyInterfaceAbstractImpl();
        inter.Method1();
        inter.Method2();
        inter.Method3();
        inter.Method4();
        //调用默认方法，如果实现类中没有，就向上找
        inter.Method5();
        //调用静态方法，直接使用接口名称
        MyInterfaceAbstract.Method6();
        System.out.println(MyInterfaceAbstract.NUM);
    }
}
